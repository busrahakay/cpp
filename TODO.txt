**********************************************************************

Show that member references are a problem for the assignment operator,
because a reference cannot be made to refer to some other data.

**********************************************************************

In references, mention how to overload a member function based on the
category of the expression for which the member function was called,
like here, where foo can be called only for rvalues:

struct A
{
  void foo() &&;
};

**********************************************************************

Overload resolution chooses a more specialized overload.  What does it
exactly mean?  Specialized?

**********************************************************************

ordering types, lower_bound, upper_bound in std::map

<=>, and how others are synthesized from <=>

std::map::Compare::is_transparent

**********************************************************************

callable vs invokable

type traits

Containers, iterators and algorithms

Variadic templates

Type aliases cannot be specialized.  Use type traits.

Injected class names in class templates.

Partial specialization

auto - more details

Tag dispatching - is it still needed?

**********************************************************************

We can't store a reference in a container (e.g., a vector), but we can
store pairs of references.  Why?

We can't have:

map<string &, int>

But we can have:

map<int, string &>

**********************************************************************

pair, tuple, get, structured bindings

get<0>(p) instead of p.first
get<1>(p) instead of p.second

**********************************************************************

Type erasure.

**********************************************************************

constexpr and literal types.

**********************************************************************
