**********************************************************************

Add std::bind to generalized call expressions.

**********************************************************************

Overload resolution chooses a more specialized overload.  What does it
exactly mean?  Specialized?

**********************************************************************

ordering types, lower_bound, upper_bound in std::map

<=>, and how others are synthesized from <=>

std::map::Compare::is_transparent

**********************************************************************

callable vs invokable

type traits

variadic templates

Type aliases cannot be specialized.  Use type traits.

Injected class names in class templates.

Partial specialization

Tag dispatching - is it still needed?

**********************************************************************

We can't store a reference in a container (e.g., a vector), but we can
store pairs of references.  Why?

We can't have:

map<string &, int>

But we can have:

map<int, string &>

**********************************************************************

pair, tuple, get, structured bindings

get<0>(p) instead of p.first
get<1>(p) instead of p.second

**********************************************************************

Type erasure.

**********************************************************************

constexpr and literal types.

**********************************************************************

Fold expressions, as in the example from cppreference.com:

// debugging aid
template<typename T, T... ints>
void print_sequence(std::integer_sequence<T, ints...> int_seq)
{
    std::cout << "The sequence of size " << int_seq.size() << ": ";
    ((std::cout << ints << ' '), ...);
    std::cout << '\n';
}
